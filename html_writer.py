"""HTML rendering utilities for DocGen-LM.

Renders documentation pages using simple template substitution.
"""
from __future__ import annotations

from pathlib import Path
from typing import Any, Iterable, Tuple, Dict
import html

from pygments import highlight
from pygments.lexers import PythonLexer, MatlabLexer, TextLexer, CppLexer, JavaLexer
from pygments.formatters import HtmlFormatter

_TEMPLATE_PATH = Path(__file__).parent / "templates" / "template.html"


def _highlight(code: str, language: str) -> str:
    """Return ``code`` highlighted for ``language`` using pygments."""
    if language.lower() == "matlab":
        lexer = MatlabLexer()
    elif language.lower() == "python":
        lexer = PythonLexer()
    elif language.lower() == "cpp":
        lexer = CppLexer()
    elif language.lower() == "java":
        lexer = JavaLexer()
    else:
        lexer = TextLexer()
    formatter = HtmlFormatter(noclasses=True, nowrap=True)
    highlighted = highlight(code, lexer, formatter)
    return f"<pre><code>{highlighted}</code></pre>"


def _render_html(title: str, header: str, body: str, nav_html: str) -> str:
    template = _TEMPLATE_PATH.read_text(encoding="utf-8")
    content = template.format(
        title=title,
        header=header,
        body=body,
        navigation=nav_html,
        static_path="static/style.css",
    )
    return "<!-- Generated by DocGen-LM -->\n" + content


def write_index(
    output_dir: str,
    project_summary: str,
    page_links: Iterable[Tuple[str, str]],
    module_summaries: Dict[str, str] | None = None,
) -> None:
    """Render ``index.html`` with *project_summary* and navigation links."""
    dest_dir = Path(output_dir)
    dest_dir.mkdir(parents=True, exist_ok=True)
    nav_html = "\n".join(
        f'<li><a href="{link}">{html.escape(text)}</a></li>'
        for text, link in page_links
    )
    body_parts = [f"<p>{html.escape(project_summary)}</p>", "<hr/>", "<h2>Modules</h2>"]

    module_items: list[str] = []
    for text, link in page_links:
        summary = (module_summaries or {}).get(text, "")
        item = (
            f'<li style="margin-bottom: 1em;">'
            f'<a href="{link}">{html.escape(text)}</a>'
        )
        if summary:
            item += f"<br/><small>{html.escape(summary)}</small>"
        item += "</li>"
        module_items.append(item)

    if module_items:
        body_parts.append('<ul style="list-style-type: none; padding-left: 0;">')
        body_parts.extend(module_items)
        body_parts.append("</ul>")

    body = "\n".join(body_parts)
    html_out = _render_html(
        "Project Documentation", "Project Documentation", body, nav_html
    )
    (dest_dir / "index.html").write_text(html_out, encoding="utf-8")


def _render_function(func: dict[str, Any], language: str, level: int = 3, prefix: str = "") -> list[str]:
    """Return HTML parts for ``func`` and any nested subfunctions."""

    parts: list[str] = []
    tag = f"h{min(level, 6)}"
    sig = func.get("signature") or func.get("name", "")
    parts.append(f'<{tag} id="{func.get("name")}">{prefix}{html.escape(sig)}</{tag}>')

    summary = func.get("summary") or func.get("docstring")
    if summary:
        parts.append(f"<p>{html.escape(summary)}</p>")

    src = func.get("source")
    if src:
        parts.append(_highlight(src, language))

    for sub in func.get("subfunctions", []):
        sub_sig = sub.get("signature") or sub.get("name", "")
        parts.append("<details>")
        parts.append(f"<summary>Subfunction: {html.escape(sub_sig)}</summary>")
        parts.extend(_render_function(sub, language, level + 1))
        parts.append("</details>")

    return parts


def _render_class(cls: dict[str, Any], language: str, level: int = 2) -> list[str]:
    """Return HTML parts for ``cls`` and any subclasses."""

    parts: list[str] = []
    tag = f"h{min(level, 6)}"
    cls_name = cls.get("name", "")
    parts.append(f'<{tag} id="{cls_name}">Class: {html.escape(cls_name)}</{tag}>')
    doc = cls.get("docstring") or cls.get("summary")
    if doc:
        parts.append(f"<p>{html.escape(doc)}</p>")

    variables = cls.get("variables", [])
    if variables:
        var_section_tag = f"h{min(level + 1, 6)}"
        parts.append(
            f'<{var_section_tag} id="{cls_name}-variables">Variables</{var_section_tag}>'
        )
        for var in variables:
            var_tag = f"h{min(level + 2, 6)}"
            name = var.get("name", "")
            parts.append(f'<{var_tag} id="{name}">{html.escape(name)}</{var_tag}>')
            summary = var.get("summary") or var.get("docstring")
            if summary:
                parts.append(f"<p>{html.escape(summary)}</p>")
            src = var.get("source")
            if src:
                parts.append(_highlight(src, language))

    for method in cls.get("methods", []):
        parts.extend(_render_function(method, language, level + 1, "Method: "))

    for sub in cls.get("subclasses", []):
        parts.append("<details>")
        parts.append(f"<summary>Class: {html.escape(sub.get('name', ''))}</summary>")
        parts.extend(_render_class(sub, language, level + 1))
        parts.append("</details>")

    return parts


def write_module_page(output_dir: str, module_data: dict[str, Any], page_links: Iterable[Tuple[str, str]]) -> None:
    """Render a module documentation page using ``module_data``."""
    dest_dir = Path(output_dir)
    dest_dir.mkdir(parents=True, exist_ok=True)
    module_name = module_data.get("name", "module")
    language = module_data.get("language", "python")
    nav_items = [
        '<li><a href="index.html"><strong>üè† Project Overview</strong></a></li>'
    ]
    nav_items.extend(
        f'<li><a href="{link}">{html.escape(text)}</a></li>'
        for text, link in page_links
    )
    nav_html = "\n".join(nav_items)

    body_parts = [f"<p>{html.escape(module_data.get('summary', ''))}</p>"]

    for cls in module_data.get("classes", []):
        body_parts.extend(_render_class(cls, language, 2))

    module_vars = module_data.get("variables", [])
    if module_vars:
        body_parts.append('<h2 id="variables">Variables</h2>')
        for var in module_vars:
            var_name = var.get("name", "")
            body_parts.append(f'<h3 id="{var_name}">{html.escape(var_name)}</h3>')
            summary = var.get("summary") or var.get("docstring")
            if summary:
                body_parts.append(f"<p>{html.escape(summary)}</p>")
            src = var.get("source")
            if src:
                body_parts.append(_highlight(src, language))

    if module_data.get("functions"):
        body_parts.append("<h2>Functions</h2>")
    for func in module_data.get("functions", []):
        body_parts.extend(_render_function(func, language, 3))

    body = "\n".join(body_parts)
    html_out = _render_html(
        html.escape(module_name),
        html.escape(module_name),
        body,
        nav_html,
    )
    (dest_dir / f"{module_name}.html").write_text(html_out, encoding="utf-8")
