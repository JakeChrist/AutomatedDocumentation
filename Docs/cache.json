{
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\cache.py:2e37ab4b52e9489ed2b2dc8e686dc29df25416d04f5b423c47ba2cc9aecf698c": "A simple on-disk cache for LLM responses. Implements methods to get and set cached values using deterministic keys based on file paths and content. Persists the cache to disk in JSON format.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\cache.py:ResponseCache:6c5d657c82e5033f80b13024ac20dfefecdf98e72801d95168c00c9807b0c562": "The `ResponseCache` class manages caching for code summaries generated by an LLM. It initializes with a file path, reads or creates a cache dictionary, provides methods to get and set cached values using a deterministic key based on file content, and saves the cache to disk in JSON format.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\cache.py:ResponseCache:__init__:919483e1ff4b05cae685fcac27aa9458bc309d42dd717af59b0942962ccdf4e4": "Initializes an object with a file path. If the file exists, it reads and parses JSON content into a dictionary; otherwise, it initializes an empty dictionary.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\cache.py:ResponseCache:_save:d6c96e0258c810e9fec48856af580533cfc0aa8f13ea666bb1d396aa4abe5e41": "The function `_save` writes the contents of `self._data` to a file using the `write_text` method. The data is serialized as JSON with an indentation of 2 spaces and keys sorted alphabetically. The file's encoding is set to \"utf-8\".",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\cache.py:ResponseCache:get:eeb84b4591575a8ed2767f4abac56f1f2dd0697e81322599734b8b31e94ddcce": "Returns the cached value associated with a given key if it exists in the cache. If the key is not found, returns `None`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\cache.py:ResponseCache:make_key:4f63c9f618b20a79035ed49cae07b9b800a46f352498e23dc8700f47c38fe96d": "The function `make_key` takes two parameters, `file_path` as a string representing the path to a file, and `content` as a string representing the content of that file. It returns a deterministic key by hashing the content using SHA-256 and appending the file path to the hexadecimal digest of the hash.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\cache.py:ResponseCache:set:0bc8af7637662ae14e3eca8604a4d7155ff442d423955a243d6b586ffee8d8ba": "Stores a value under a given key in an internal data structure and persists the changes to disk.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\docgenerator.py:141aa96a3f27a460be055149bc6ab9765af360960c726b9f0461296b1cf881c6": "This Python script generates HTML documentation for a project using a local language model (LLM). It scans a source tree for Python and MATLAB files, parses them, requests summaries from the LLM, and writes the documentation to an output directory. The script includes functionality to clean the output directory, build prompts for summarization, rewrite docstrings with context, and generate both module-level and class/function-level summaries.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\docgenerator.py:_build_function_prompt:c932d9f8736c455a65ee9a6b1ac0a182cb4a63da473f29f49c8b8952bcc0b414": "This function `_build_function_prompt` constructs a prompt for summarizing a Python function using a language model. It takes the source code of the function, an optional class name and summary, and an optional project summary as inputs. The function returns a multi-line string that serves as the context for the documentation generator to understand the function's place within its class and project before generating a summary based on the provided source code.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\docgenerator.py:_rewrite_docstring:07544ae72018dd0e184cf1d68a60d48145ba8c8d8405062f6e37ddcb36131022": "This function `_rewrite_docstring` takes an LLM client, a response cache, a file path, and a dictionary representing an item (likely a code element like a function or method). It optionally accepts class name, class summary, and project summary. The function checks if there is source code or a docstring in the item; if not, it prints a warning and returns.\n\nIt constructs a prompt based on whether context (class and project summaries) is provided. If context is given, it builds a function prompt using `_build_function_prompt`; otherwise, it uses a default `DOC_PROMPT`. It then generates a key for caching by combining the file path, item name, source code, docstring, and any additional context.\n\nThe function calls `_summarize` to generate a new docstring using the constructed prompt. If a summary is generated, it sanitizes it; otherwise, it sets the docstring to \"No summary available.\" The resulting docstring is then updated in the item dictionary.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\docgenerator.py:_summarize:ab18de1807793f20f69a35bf12b1ff90a847eef6a07b67c8fcaf8003a81b2292": "This function `_summarize` takes an LLMClient instance, a ResponseCache instance, a key string, a text string, and a prompt_type string as parameters. It first attempts to retrieve a cached summary using the provided key. If a cached summary exists, it returns that summary. Otherwise, it uses the LLMClient to generate a new summary for the given text and prompt type, caches this new summary under the provided key, and then returns the generated summary.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\docgenerator.py:clean_output_dir:e1a6eccc2217f903fe5182769df23294a114d2d6bdef6bdad5313413b65fb3de": "The function `clean_output_dir` takes a string `output_dir` representing the path to an output directory. It iterates through all files in this directory that end with `.html`. For each file, it attempts to open and read the first line. If the first line contains the string \"Generated by DocGen-LM\", indicating that the file was generated by the tool, it deletes the file. If any exceptions occur during these operations, it prints a warning message with details of the error.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\docgenerator.py:main:9d95440c79b72e74e1aa1e8fff7f921e388178c819d26ee549cdcf247d7351c8": "The `main` function serves as the entry point for generating HTML documentation using a local Large Language Model (LLM). It processes command-line arguments to specify the source directory, output directory, ignored paths, LLM URL, and model name. The function initializes an LLM client, checks connectivity, sets up output directories, and caches responses.\n\nIt scans the source directory for Python and MATLAB files, parses them, and generates summaries using the LLM client. The summaries are stored in a cache to avoid redundant requests. The function also handles project-level documentation from README.md and docstring prompts. It constructs an outline of the project structure and uses this information to generate class and function summaries with context.\n\nFinally, it writes index and module pages to the output directory, containing the generated summaries and links between modules.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\html_writer.py:16eccd5fea586efa16f44faa06a446231effaaf425669f204f3de2379898377d": "This module provides utilities for rendering documentation pages using simple template substitution. It includes functions to highlight code snippets and render HTML content based on project summaries and module data. The `write_index` function generates an index page with navigation links, while the `write_module_page` function creates detailed documentation pages for individual modules, including classes, methods, and functions. Both functions use a shared template and apply HTML escaping to ensure safe rendering of user-provided content.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\html_writer.py:_highlight:d6540aaa10414bdf295edcd29e6df40d27cca03d0f741432a2a7eb1fc9062aec": "The `_highlight` function takes a string of code and a language identifier as input. It uses the Pygments library to highlight the code based on the specified language. If the language is MATLAB or Python, it selects the corresponding lexer; otherwise, it uses a generic text lexer. The highlighted code is then formatted using an HTML formatter with no classes and without line wrapping. The function returns the highlighted code wrapped in `<pre><code>` tags for proper display in HTML.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\html_writer.py:_render_html:54b96f809bd5c40701396752d1cc06d797b4b9122ff5ee7d85c7db5abecea3cd": "This function `_render_html` takes four parameters: `title`, `header`, `body`, and `nav_html`. It reads a template file from `_TEMPLATE_PATH`, formats it with the provided parameters, and returns the formatted HTML string. The function includes a comment indicating that the output is generated by DocGen-LM.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\html_writer.py:write_index:c2a4a131460ec50b8db6fa4d25a1218bd8686c5bae07ca53cb5f902bccaca693": "The function `write_index` generates the content for an `index.html` file in a specified output directory. It takes parameters for project summary, navigation links, and optional module summaries. The function creates the destination directory if it doesn't exist, constructs HTML elements for the project summary and navigation links, and optionally includes summaries of modules. It then renders these elements into complete HTML content using `_render_html` and writes the output to `index.html`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\html_writer.py:write_module_page:ff73f31f31e83dbef302322bcb132e060dcebb97d3431e06b74e0ad107cbf485": "This function `write_module_page` generates an HTML documentation page for a Python or MATLAB module. It takes three parameters: `output_dir`, which is the directory where the output file will be saved; `module_data`, which contains information about the module such as its name, language, summary, classes, and functions; and `page_links`, which are links to other pages in the documentation.\n\nThe function first creates a destination directory if it doesn't exist. It then constructs HTML content for the page, including a navigation bar with links to other pages and a body containing summaries of classes and methods within the module. If there are functions defined in the module, they are also included in the body. The HTML is generated using a helper function `_render_html`, which takes the module name, title, body content, and navigation HTML as arguments. Finally, the generated HTML is written to a file named after the module in the specified output directory.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\llm_client.py:017f9fceffc8768792b7a26edd6d84ef2f0fac121d5ed21de6be7e6e3592b3af": "- Defines an interface to interact with a local language model (LLM) backend using LMStudio.\n- Includes prompts for different types of documentation and code summaries.\n- Implements a `sanitize_summary` function to clean up generated summaries by removing unwanted phrases.\n- Provides a `LLMClient` class that:\n- Initializes with a base URL and model name.\n- Checks connectivity to the LLM server using the `ping` method.\n- Generates summaries for given text using specified prompt types through the `summarize` method.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\llm_client.py:LLMClient:5fbf34bca091de06d7395e6157edfa58542adfac36004a452d64d49da37328db": "The `LLMClient` class in the DocGen-LM project is designed for generating documentation summaries from source code files using a local Large Language Model (LLM). It includes methods for initializing with a base URL and model, checking API reachability, and summarizing text based on specified prompt types.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\llm_client.py:LLMClient:__init__:700c23b8c0716a1aaf00c10fbc2e056bef4f6e1dca9c72b739185f920ef55cf8": "Initializes an object with a base URL and a model. The base URL is stored after removing any trailing slashes, and the endpoint for chat completions is constructed using this base URL. The model type is also stored.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\llm_client.py:LLMClient:ping:3fe5655e89accd067c6ddc9c1cc323c9dd9eac2dea9be6646ea4d470b3e0a436": "The function `ping` checks if an API is reachable by sending a GET request to the specified base URL. It accepts an optional timeout parameter with a default value of 2.0 seconds. If the server responds successfully, it returns `True`. If there is any issue during the connection or response handling, it raises a `ConnectionError` with a message indicating that the server cannot be reached at the given base URL.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\llm_client.py:LLMClient:summarize:b1a476007dba66e5510bf80c9aee0418d5bacde02f9b1185988415d3f5b7a4f3": "The function `summarize` takes a string `text` and a string `prompt_type` as input. It uses the specified `prompt_type` to format a prompt, then sends this prompt to an endpoint using a payload that includes a model, temperature, and messages. The function attempts to receive a response up to three times, handling HTTP errors and request exceptions by retrying with a one-second delay each time. If successful, it sanitizes and returns the summary content; otherwise, it raises a `RuntimeError` with an error message.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\llm_client.py:sanitize_summary:328b19849b771100857bb8c6444b48431fee1becb835e7d92a9963437cb12900": "The `sanitize_summary` function removes meta-commentary from a given text by filtering out lines that start with specific phrases or contain certain keywords related to summaries, outputs, and responses. It processes the input text by splitting it into lines, filtering out unwanted lines based on predefined criteria, and then joining the remaining lines back together.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\parser_matlab.py:15cf90e58e5b33528fe0fc6fa2e48fa77e43bd0fed902a29ea22b67a2f78ff68": "This module provides a parser for MATLAB `.m` files. It extracts the file's header comments and any function declarations found within the file. Each function entry includes the function name and a list of arguments. The parsing uses simple line-based techniques as specified in the Software Requirements Specification (SRS).",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\parser_matlab.py:parse_matlab_file:98e56490608eae9cf5f58ecfcabce614d40fc4adf171eb4f51b1862c1635c59d": "The function `parse_matlab_file` reads and parses a MATLAB `.m` file to extract its header comments and function declarations. It returns a dictionary containing the extracted header as a string and a list of dictionaries, each representing a function declaration with its name and arguments. The function uses regular expressions to identify and parse function definitions within the file's body.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\parser_python.py:3a2a9b7664504ae6c8ef1905e400d9f06a7eb0f0680741d90e30ce977a1ce987": "This module provides a parser for Python files using the `ast` module to extract structured information according to the Software Requirements Specification (SRS). It includes functions to format arguments and signatures of functions and methods, and a main function to parse a Python source file and return a dictionary containing the module docstring, classes, and functions. Each class and function is represented with its name, signature, docstring, and source code segment.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\parser_python.py:_format_arg:cbe6f1a8035c6fe3e86a63f2e84e8c9d5f73d4565f294b2c9730f5b2bf809d44": "Formats an argument from the Abstract Syntax Tree (AST) by appending its type annotation, if available.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\parser_python.py:_format_arguments:881b31b9f315a915f96f295e1b615ecf667d48840ad89cab8656aa66b735c2e7": "This function `_format_arguments` takes an `ast.arguments` object as input and returns a string representation of the function arguments. It handles positional-only, regular, variable positional, keyword-only, and variable keyword arguments, including their default values if provided. The function uses helper functions like `_format_arg` to format individual argument names and iterates through the different types of arguments to construct the final string.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\parser_python.py:_format_signature:4ef0c9abbcd2f38f64f076ce12a7beb07346595100595710d104dc9cb3d172eb": "This function `_format_signature` takes an `ast.FunctionDef` or `ast.AsyncFunctionDef` object as input and returns a string representing the signature of the function. It formats the parameters using the `_format_arguments` helper function and appends the return type if specified in the function definition.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\parser_python.py:parse_python_file:025baabb754d3fc7c93184520f3d394a0cfbefe7ef296595cb4fa69062af7834": "This function `parse_python_file` takes a file path as input and returns a dictionary containing structured information about the Python source code. It reads the source code from the specified file, parses it using the `ast` module to extract the abstract syntax tree (AST), and then extracts relevant details such as the module docstring, classes, and functions. For each class and function found, it captures their names, signatures, docstrings, and source code segments. The parsed information is organized into a dictionary and returned.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\reviewer.py:6a93d618a253fc978a2efb4e7a399150eeb0d2bed5d4abd80181174fa8881fe1": "This module provides a tool for reviewing HTML documentation generated by DocGen-LM. It includes functions to check for assistant-like phrases, contradictions, and hallucinations in the documentation. The `review_directory` function processes all `.html` files in a specified directory, applying checks and optionally fixing issues based on the `autofix` flag. The `main` function sets up command-line arguments to specify the directory to review and whether to automatically fix detected issues.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\reviewer.py:_find_line_number:12ee52af23a70731af76ffcfdde45eb4138bf79324a53c5430d402dce88eb735": "This function `_find_line_number` searches for a specific phrase within an HTML string and returns the line number where the phrase is found. If the phrase is not present, it returns -1. The search is case-insensitive.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\reviewer.py:_is_generated_html:f71db6cd6fea097c810e3e3390f8520fa34227e1ce03bf977f25e2e3f49d61bd": "The function `_is_generated_html` checks if a given string `text` appears to be output from the DocGen-LM documentation generator. It returns `True` if the text contains specific HTML tags that are characteristic of DocGen-LM's generated documentation, such as an `<h1>` tag with the text \"Project Documentation\", or `<h2>` and `<h3>` tags containing \"Class:\" and \"Method:\", respectively.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\reviewer.py:_review_file:22f34ef135a70bc5dc9b227597baa6ee3283ffbad848fc50cc73ad0d0089dcfb": "The function `_review_file` takes a file path and an optional `autofix` flag as input. It reads the HTML content from the specified file, checks for assistant phrasing, contradictions, and hallucinations using predefined functions (`check_assistant_phrasing`, `check_contradictions`, `check_hallucinations`). If any issues are found, it appends a message to the results list indicating the type of issue (assistant phrasing, contradiction, or hallucination) along with the file name. If the `autofix` flag is set and there are issues, it sanitizes the paragraphs in the HTML content using `_sanitize_paragraphs` and writes the modified HTML back to the file. Finally, it returns a list of review results.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\reviewer.py:_sanitize_paragraphs:4b1924f38307e1de1d7477188cca504d83a80d501239e63235223e0a63a77bbc": "The function `_sanitize_paragraphs` processes a `BeautifulSoup` object to clean up paragraph (`<p>`) elements. It iterates through all `<p>` tags in the provided HTML structure, extracts their text content, sanitizes it using the `sanitize_summary` function, and then updates the text of each `<p>` tag with the sanitized version.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\reviewer.py:check_assistant_phrasing:99e719c9bbf9ff225127a853a2af99b5dd16b6a37c1af6cd976e99d7e7aafc33": "The function `check_assistant_phrasing` analyzes an HTML document using BeautifulSoup to identify paragraphs containing phrases that resemble assistant-like language. It returns a list of these phrases along with their line numbers in the original HTML source code. The function iterates over all paragraph elements, checks if any predefined assistant phrases are present in the text, and records the findings.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\reviewer.py:check_contradictions:4c1726365b1e371054470bda3cfd1fb800f3ace9517e734bbe94e2450c75cca1": "This function `check_contradictions` analyzes the HTML content using BeautifulSoup to identify contradictions between the text summary and the actual structure of the code. It checks for discrepancies such as:\n\n1. The presence of method headers when the summary states there are no methods.\n2. The presence of function headers when the summary states there are no functions.\n3. The presence of class headers when the summary states there are no classes.\n\nThe function returns a list of strings describing any contradictions found in the documentation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\reviewer.py:check_hallucinations:3f87b3b4839688b0b8ed2b0753e1e2d1e57590e85662793ae4aea924932388b4": "This function `check_hallucinations` takes a BeautifulSoup object as input and returns a list of phrases detected as hallucinations. It iterates through all paragraph elements (`<p>`) in the HTML content, extracts their text, converts it to lowercase for case-insensitive comparison, and checks if any predefined hallucination terms are present. If a hallucination term is found, it is added to the findings list.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\reviewer.py:main:ebc53b1f0f6a6b474637347930593419ffb26c5c4d2d194f6f90aea4cc923d78": "The `main` function serves as the entry point for reviewing generated HTML documentation. It accepts command-line arguments specifying the directory containing the HTML files and an optional flag to enable automatic fixes for issues in these files. The function uses the `argparse` module to parse these arguments and then calls the `review_directory` function with the provided directory path and autofix setting.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\reviewer.py:review_directory:f3cda16ac40924e409d3041f9a2238b6d6da800ddfffbc8fc6139d49b3966692": "The `review_directory` function iterates over all HTML files within a specified directory and its subdirectories using `rglob`. For each file, it calls `_review_file` with the file path and an optional `autofix` flag. If an exception occurs during the review process, it prints an error message and continues to the next file. The results from `_review_file` are printed line by line.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\scanner.py:_is_subpath:c8a93988c5533ebfadb206fc27d4e3da0197d394f70696b5b62cae28e0bfeac6": "This function checks whether a given `path` is either equal to or a subdirectory of another `parent` directory. It uses the `relative_to` method from Python's `Path` class to determine if `path` can be made relative to `parent`. If successful, it returns `True`, indicating that `path` is a subpath of `parent`. If a `ValueError` is raised during this operation, it means `path` is not a subpath of `parent`, and the function returns `False`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\scanner.py:fd7e0f952dd35ca841116789b2d99cfc36e1d26a7cf0ee616028fe9532c20347": "The module defines a function `scan_directory` that recursively discovers Python (``.py``) and Objective-C (``.m``) source files within a specified directory. It includes an internal helper function `_is_subpath` to check if one path is a subpath of another. The `scan_directory` function also allows for ignoring specific paths or directories during the scan, as defined in the `ignore` list.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\scanner.py:scan_directory:10c412ebbca4b4ff2e7ee873aa70b6a43a382d3b6e959544053aa52ad16e8ada": "The `scan_directory` function recursively discovers Python (``.py``) and MATLAB (``.m``) files under a specified base directory while ignoring certain paths. It returns a list of absolute paths to the discovered source files. The function uses `os.walk` to traverse the directory tree, filters out ignored directories and files, and collects the paths of relevant source files.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_cache.py:97b2ae8f04e70da29a7fb5d7cb91652ea871818ccc183154b3320347b5835642": "The module defines two functions for testing a response cache implementation. The `test_cache_round_trip` function tests setting and retrieving a value from the cache, ensuring that the value persists across instances of the cache. The `test_cache_get_missing` function verifies that attempting to retrieve a non-existent key returns `None`. Both functions use a temporary file path provided by `tmp_path` for storing the cache data.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_cache.py:test_cache_get_missing:949b51987cfc39febab6ddcf35ba3753699419f3b231c4393f974d9c3759e361": "The function `test_cache_get_missing` tests the behavior of a response cache when attempting to retrieve a value for a key that does not exist in the cache. It creates an instance of `ResponseCache` with a temporary JSON file as the cache storage location. The test asserts that calling `get` on the cache with a non-existent key (\"unknown\") returns `None`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_cache.py:test_cache_round_trip:1ec3861c1a4ca6135e691d4eab3cf713a16cad30c2547a470a4de18a95c40d98": "This function tests the round-trip functionality of a `ResponseCache` class. It creates a temporary file to store the cache, initializes a `ResponseCache` instance with this file path, and sets a key-value pair in the cache. Then, it reloads the cache from the same file and asserts that the value retrieved matches the original value set.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_docgenerator.py:ace4892a4c3ae2a7ef824df4bc1647c9f5b6c29a704e8adf82bda258899c5ed1": "This module contains unit tests for a code documentation generator. It uses the `unittest.mock` library to patch the `docgenerator.LLMClient` class and test various scenarios, such as skipping invalid Python files, handling different types of summaries (module, class, function), sanitizing project summaries, using README content for summaries, and cleaning up existing output directories before generating new documentation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_docgenerator.py:test_clean_output_dir:3e6c225e0dd998b6662d427f231844425c515b313956e9455914b672e038fe79": "The function `test_clean_output_dir` is a unit test that verifies the behavior of the `clean_output_dir` function from the `docgenerator` module. It creates a temporary directory, simulates the presence of various files within it (some generated by DocGen-LM and others custom), and then calls `clean_output_dir` to clean the output directory.\n\nThe test asserts that after calling `clean_output_dir`, only the custom HTML file remains, while the generated HTML file and CSS asset are removed. This ensures that the function correctly identifies and deletes files that were created by DocGen-LM, leaving behind only user-provided or other non-generated content.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_docgenerator.py:test_generates_class_and_function_summaries:c8cec783c68e4646d0155acd2108bc50325c3c381af13f686b9047266711af03": "The function `test_generates_class_and_function_summaries` is a unit test for the `main` function of the DocGen-LM tool. It creates a temporary project directory with a Python module containing a class and a function, sets up a mock LLM client to return predefined summaries, runs the main function with specified input and output directories, and asserts that the generated HTML files contain the expected summaries for the class and function.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_docgenerator.py:test_handles_class_without_docstring:60e97ca2f0f195b91a3034086ab50448a68e7bd2f1a6d502acebf80306e3c207": "This function tests the handling of a Python class without a docstring. It creates a temporary project directory with a single module containing an empty class named `Foo`. The function then calls the `main` function with this project directory and specifies an output directory for the documentation. A mock LLM client is used to simulate responses during the summarization process, ensuring that the class summary is generated correctly. Finally, it asserts that the generated HTML file contains the expected class summary text.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_docgenerator.py:test_project_summary_is_sanitized:f345a134da5d197d08404b35a9409d24fe4c21349c4c04c5d8331b20d44737a0": "The function `test_project_summary_is_sanitized` is a unit test for the `main` function of the DocGen-LM tool. It creates a temporary project directory with a Python module, sets up a mock LLM client to simulate responses, and then runs the `main` function with specified output and project directories. The test asserts that the generated HTML documentation does not contain certain phrases (\"You can run this\" is absent) while ensuring another phrase (\"It prints.\" is present).",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_docgenerator.py:test_readme_summary_used:edfabda531c84d59f8779d3ce0f9872d475fa61d7b4d82cf25f3a1f9ae2ca407": "This function tests the generation of a README summary using the `docgenerator` tool. It creates a temporary project directory with a Python module and a README file, then invokes the main function with specified output and input directories. The test uses a mock LLM client to simulate responses for different types of summaries (module, readme, project, function). After running the main function, it checks if the README summary is included in the generated HTML documentation and verifies that the LLM client was called with the correct arguments for summarizing the README.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_docgenerator.py:test_skips_invalid_python_file:2f7be13a05fb9c1ac374f2131c4c716b6a27065f8a7ce6edea5b90b90db474d5": "This function tests the behavior of a documentation generator when encountering an invalid Python file. It creates a temporary project directory with a file containing invalid syntax due to a leading zero in a number. The function then calls the `main` function with this project directory and specifies an output directory for the generated documentation. A mock LLM client is used to simulate responses, ensuring that only the index page is generated and no documentation is created for the invalid file.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_docgenerator.py:test_skips_non_utf8_file:2a3feaf71e8854895212d42079ca4e2ec62970c04d243f69293943033785b527": "The function `test_skips_non_utf8_file` tests the behavior of a documentation generator when encountering a non-UTF-8 encoded file. It sets up a temporary project directory with a non-UTF-8 encoded Python file and an output directory for documentation. The function then mocks an LLM client to simulate successful pinging and summarization. When running the main function with the specified directories, it asserts that the return value is 0 (indicating success) and that only an `index.html` file is generated in the output directory, while a non-UTF-8 encoded file (`bad.py`) does not result in a corresponding documentation file (`bad.html`).",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_html_writer.py:435035d70f3c463453fb6feec19e75d7921faf4f58fadafb10f4f3dc0ad1f010": "The module defines two functions: `test_write_index` and `test_write_module_page`. These functions are used to test the functionality of writing HTML index and module pages, respectively. The tests use a temporary path (`tmp_path`) to create HTML files and then validate their content through assertions.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_html_writer.py:test_write_index:35f4d6d5f4a0bd0eebf56c1e9b9a0214316046fcf4ffb9bd55fff7adda443244": "This function `test_write_index` is designed to test the `write_index` function, which generates an HTML index file for a project's documentation. The test uses a temporary path (`tmp_path`) to create and validate the output.\n\nThe function takes several parameters:\n- `links`: A list of tuples containing module names and their corresponding HTML file paths.\n- `summaries`: A dictionary where keys are module names and values are their summaries.\n- Additional parameters for the project title and other metadata.\n\nThe test performs the following steps:\n1. Calls `write_index` with the provided parameters.\n2. Reads the generated `index.html` file from the temporary path.\n3. Asserts that the HTML file contains specific tags and content, such as the generator comment, project summary, module links, summaries, and headings.\n\nThe assertions ensure that the HTML output is correctly formatted and includes all necessary elements for a documentation index page.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_html_writer.py:test_write_module_page:0596c95132f6e604f19b07443a56d352b2ffabd83fd635e96fa43b79b6df29da": "The function `test_write_module_page` is a unit test for the `write_module_page` function. It verifies that the generated HTML page for a module contains the expected content, including links, module summary, class details, method summaries, and function summaries. The test uses a temporary directory to create the output file and checks various aspects of the HTML content to ensure it matches the expected structure and data from the `module_data` dictionary.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_integration.py:e977cba7f0b91bc157a456c9b49e68be4ca45d263b578fcfe7b372ef54d38deb": "The module defines two test functions for a documentation generator. The first function, `test_docgenerator_generates_html`, tests the generation of HTML files from Python and MATLAB files in a project directory using a mock LLMClient. It verifies that the output directory contains index.html, hello.html, and util.html files, and that the hello.html file includes a summary.\n\nThe second function, `test_static_copied_from_any_cwd`, tests the copying of static files (e.g., style.css) from any current working directory to the output directory. It uses a mock LLMClient and changes the current working directory to the project directory before running the main function. The test asserts that the static file is copied to the output directory.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_integration.py:test_docgenerator_generates_html:03875c35fa437dd478befa9311c86ff4d75b2a0edb7505fd6d220ae8e13520a7": "This function `test_docgenerator_generates_html` tests the functionality of a documentation generator for Python and MATLAB projects. It creates a temporary project directory with simple source files (`hello.py` and `util.m`) and an output directory. The function uses a mock LLM client to simulate responses during the summarization process. After running the main function, it verifies that HTML files are generated in the output directory and checks if the expected summary text is present in one of the HTML files.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_integration.py:test_static_copied_from_any_cwd:2851fb35644b8217be7ad3292c97fd09c19f181325a9466702c08c5178206c47": "This function tests the generation of static documentation from a Python project using a mock LLM client. It creates a temporary project directory with a single Python module, sets up an output directory for the documentation, and configures a mock LLM client to return a predefined summary. The function then changes the current working directory to the temporary project directory, runs the main function with the specified project and output directories, and asserts that the return value is 0 (indicating success). Finally, it checks that the `style.css` file exists in the output directory's static folder.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_llm_client.py:ff8a0c5e5d3895b53e3efd3ac0badb2dca6ba723a90e55d61bc0a3a56cb89180": "This module defines a test suite for an `LLMClient` class. It includes tests for the `ping`, `summarize`, and `sanitize_summary` methods of the client. The tests use mocking to simulate HTTP requests and responses, as well as the `pytest` framework for assertions.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_llm_client.py:test_ping_failure:0adba929125f613bc9f52ce9a7239c04677374d860d256ca90a92c010163cfe3": "This function tests the `ping` method of an `LLMClient` class when a connection failure occurs. It uses the `patch` context manager from the `unittest.mock` module to mock the `requests.get` call, causing it to raise a `RequestException`. The function asserts that calling `client.ping()` raises a `ConnectionError`, indicating a successful test of the client's ability to handle connection failures gracefully.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_llm_client.py:test_ping_success:9f00eb2af6a14b170a85ba907d3c253d3d76e24b798029ec3ef0f25da7ebbc9b": "The function `test_ping_success` tests the `ping` method of an `LLMClient` class. It creates a mock response object that simulates a successful HTTP GET request. The `raise_for_status` method of the mock response is also mocked to ensure it does not raise any exceptions. The function then asserts that calling `client.ping()` returns `True`, indicating a successful ping. It also verifies that the `requests.get` method was called once with the specified URL and a timeout of 2.0 seconds, and that `raise_for_status` was called on the mock response object to confirm it did not raise an exception during the test.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_llm_client.py:test_prompt_varies_by_type:7500b7446e409be4a02298bb234f62fdbce53050de12941d5dea17f6f1467f56": "This function tests that the prompt sent to an LLM client varies by the type of code being summarized. It uses a mock response from the LLM client and patches the `requests.post` method to simulate different responses based on the type of code (\"class\" or \"function\"). The function then asserts that the prompts for classes and functions are generated using specific templates and that they are not equal, ensuring that the prompt varies by type.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_llm_client.py:test_readme_prompt_template_used:840445f9fb4a95ffe19f3c9aeaf4da8c1c4bf98e77f366d138beee6694ea7274": "This function tests whether the `LLMClient` class correctly uses a predefined prompt template for generating summaries of README files. It creates an instance of `LLMClient`, mocks its response to simulate an LLM server, and then calls the `summarize` method with \"foo\" as the text and \"readme\" as the context type. The function asserts that the generated prompt matches the expected format based on the `PROMPT_TEMPLATES[\"readme\"]` template, replacing `{text}` with \"foo\".",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_llm_client.py:test_sanitize_summary_filters_phrases:8eff3e7c4b28a2c9823c49b3fb229c6d6177bc365d38cfebd64bbe3b9c782c06": "The function `test_sanitize_summary_filters_phrases` tests the `sanitize_summary` function to ensure it correctly filters out specific phrases from the input text. The test checks if the summary is sanitized by removing phrases like \"You can run this.\", \"Note that it is simple.\", and \"This script does nothing.\"",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_llm_client.py:test_summarize_raises_runtime_error_with_message:4da5ffecb0764c8f10a5ac436941479d26a562ba06d281f341bb7b1e09c1c693": "The function `test_summarize_raises_runtime_error_with_message` tests the behavior of the `summarize` method in the `LLMClient` class when an HTTP error occurs. It uses a mock response to simulate a server error, raising an `HTTPError` and then a `ValueError`. The test asserts that a `RuntimeError` is raised with the message \"server exploded\" when calling the `summarize` method.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_llm_client.py:test_summarize_retries_and_returns_summary:6e8798ea54fa42db378914304b300a92215748be8e233bd11ed71fa5503200d5": "The function `test_summarize_retries_and_returns_summary` tests the `summarize` method of an `LLMClient` class. It mocks an HTTP client to simulate a request failure and then a successful response. The test verifies that the `summarize` method retries on failure, waits for 1 second between attempts, and returns the summary from the successful response.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_parser_matlab.py:d371df41f01bfadecc63c5f1bddb7b77eb2309a17405bffe247ca4a3e17973bd": "This module defines two test functions to verify the functionality of a MATLAB file parser. The `test_parse_simple_matlab` function checks if the parser correctly extracts the header and a single function from a simple MATLAB file. The `test_parse_multiple_functions` function ensures that the parser can handle multiple functions within a single MATLAB file, including checking the names and arguments of each function.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_parser_matlab.py:test_parse_multiple_functions:546d4c9ff4186a34f8dfaf6b43ac6cda5c9e93c640d8c1bdbc38364b5c484916": "This function `test_parse_multiple_functions` tests the `parse_matlab_file` function by providing it with a MATLAB file containing multiple functions. It asserts that the parsed output includes two functions named \"compute\" and \"square\", with the correct arguments for each function. The test ensures that the parser correctly identifies and extracts function names and argument lists from the source code.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_parser_matlab.py:test_parse_simple_matlab:313030d6485b0cd78055342faa39bef598fccf4cc180467b708e667951386cfb": "This function, `test_parse_simple_matlab`, tests the parsing of a simple MATLAB file. It creates a temporary file with MATLAB code and uses the `parse_matlab_file` function to parse it. The test checks that the header is correctly extracted and that there is one function defined in the file. It further verifies that the function's name, arguments, and body are accurately parsed.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_parser_python.py:c9cd0efc42de5b3182fc1d64d54b126c109e111267c90017988eccb169d8325a": "This module contains tests for parsing Python files using a custom `parse_python_file` function. It includes two test functions:\n\n1. `test_parse_simple_module`: Tests parsing a simple Python module with a class and a function, verifying the extracted docstrings, signatures, and source code.\n\n2. `test_parse_complex_signature`: Tests parsing a function with complex signature parameters, ensuring the correct handling of positional-only arguments (`/`), keyword-only arguments (`*`), default values, and variable-length keyword arguments (`**kw`).",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_parser_python.py:test_parse_complex_signature:a9bb94e28d63bb354349b450135d1dadcf36d0b294abcbf131869111d16275d5": "The `test_parse_complex_signature` function tests the parsing of a Python file containing a complex function signature. It creates a temporary Python file with the specified content, parses it using the `parse_python_file` function, and then checks if the parsed signature, docstring, and source code are correctly extracted. The test asserts that the function signature matches the expected format, the docstring is accurately captured, and the docstring is present in the original source code.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_parser_python.py:test_parse_simple_module:363c2ce5cf69917f2d6db01a5702d4b118f6c4eee02b9ff60000154f6d121a20": "This function `test_parse_simple_module` tests the parsing of a simple Python module. It creates a temporary file with sample Python code, then uses the `parse_python_file` function to parse this file. The test checks that the parsed results include the correct module docstring, class name and docstring, method signature and docstring, function signature and returns information, as well as snippets of the source code for verification.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_reviewer.py:83233473a3bb44ee0c5e26502caa85ad29205c84af0e40280e3fd12a3f730505": "This module defines several functions and tests for a code review tool. It includes:\n\n1. `_make_module`: Creates a temporary module page with specified summary and methods.\n2. `test_assistant_phrasing_detected`: Tests if the assistant phrasing is detected and reported.\n3. `test_contradiction_detected`: Tests if contradictions in method definitions are detected and reported.\n4. `test_hallucination_detected`: Tests if hallucinations (incorrect claims about code features) are detected and reported.\n5. `test_autofix_removes_phrasing`: Tests if autofix removes specified phrases from the generated HTML.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_reviewer.py:_make_module:e72c9d938f64f7282bcbd027488ce1b37f35793561925f0eee3fba3e6c27570f": "This function `_make_module` generates a temporary HTML module page for documentation purposes. It takes three parameters: `tmp_path`, which is the path to a temporary directory where the module page will be created; `summary`, which is a string summarizing the module; and `methods`, an optional list of dictionaries representing methods within the module.\n\nThe function constructs a dictionary `data` with keys for the module's name, summary, classes, and functions. If `methods` are provided, it adds a class named \"Foo\" to the `classes` list in `data`. Each method is represented as a dictionary with keys for the method's name, docstring, summary, and methods (which recursively includes nested methods).\n\nThe function then calls `write_module_page`, passing the temporary path, the constructed `data`, and a tuple specifying the index file and its name. Finally, it returns the path to the generated module HTML file (`mod.html`).",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_reviewer.py:test_assistant_phrasing_detected:e96ad5f595f9af93bc94a0fcf9d490739b4708e1e044164bbde60051a67c551c": "This function `test_assistant_phrasing_detected` is designed to test if the assistant phrasing \"[ASSISTANT]\" is detected and included in the output when generating documentation for a Python module. It creates a temporary directory, generates a simple Python module with the specified content, runs the main function of the DocGen-LM tool on this directory, captures the standard output, and asserts that both the assistant phrasing and the generated HTML file name \"mod.html\" are present in the output.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_reviewer.py:test_autofix_removes_phrasing:011a3e200d1608b4a82f31b8c528626c3989d537f4ef641038e77000c314febd": "This function `test_autofix_removes_phrasing` tests the functionality of an autofix feature within a documentation generation tool. It creates a temporary directory, generates a module with specific phrasing (\"You can call this.\"), and then runs the main function with the `--autofix` option. After execution, it reads the generated HTML file and asserts that the specified phrasing has been removed from the content.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_reviewer.py:test_contradiction_detected:47a7390274b4b1250eee9ae2a3461129c3d6329d644ea74cc099711c0a4d8b54": "The function `test_contradiction_detected` is a unit test that checks if the system detects and reports contradictions in documentation summaries. It creates a temporary module with no methods defined, runs the main function of the project on this module, and captures the output. The test asserts that the string \"[CONTRADICTION]\" appears in the output, indicating that the system has detected a contradiction.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_reviewer.py:test_hallucination_detected:901455f9651c9761a0e669b0834280e079baf97c5534189a0765b2bb02a25749": "This function `test_hallucination_detected` is designed to test for the detection of hallucinations in documentation generation. It creates a temporary module with a specified docstring, runs the main function with the path to this module, and captures the output. The function asserts that the string \"[HALLUCINATION]\" appears in the captured output, indicating that a hallucination has been detected during the documentation generation process.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_scanner.py:3ec32c624e4312ae44349511245ebc4be1d33ae9233f8c4ba760f4c5f65f37f1": "The module defines a function `scan_directory` from the `scanner` module and tests it with `pytest`. It includes three test functions:\n\n1. `test_scan_directory_ignore_folder`: Creates files in a temporary directory, including an \"ignore_me\" folder. Calls `scan_directory` to get a list of file paths, excluding files in the \"ignore_me\" folder. Asserts that only expected files are included.\n\n2. `test_scan_directory_mixed_file_types`: Creates files with various extensions and nested directories. Calls `scan_directory` without ignoring any folders. Asserts that all non-.git files are included in the result.\n\n3. `test_scan_directory_skips_git_folder`: Creates files, including ones inside a .git folder. Calls `scan_directory` without ignoring any folders. Asserts that the .git folder and its contents are excluded from the result.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_scanner.py:create_files:15664a11085953af50602f93473d2c33b61b24fb010d0cb283be24fe186b234c": "The function `create_files` takes a base directory and a list of file paths relative to the base directory. It creates each specified file, ensuring that any necessary parent directories are also created if they do not already exist. Each file is initialized as an empty string.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_scanner.py:test_scan_directory_ignore_folder:cd82d14517f8aa7e897e3973a4bdc119363a4e32e7df79271591f5be2bfdb1bd": "This function `test_scan_directory_ignore_folder` tests the `scan_directory` function with a temporary directory containing various files and subdirectories. It specifies that the \"ignore_me\" folder should be ignored during the scan. The test asserts that the resulting set of file paths matches the expected set, excluding the \"ignore_me\" folder and its contents.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_scanner.py:test_scan_directory_mixed_file_types:fd963c1eef9d5d243d5c7c75ff72a503fafd31943cc8f70bc656e61f6daa3409": "The function `test_scan_directory_mixed_file_types` is a unit test that verifies the functionality of the `scan_directory` function. It creates a temporary directory with files of various types (Python, MATLAB, text, and Markdown) and subdirectories containing Python and MATLAB files. The test then calls `scan_directory` on the temporary directory path and asserts that it returns a set of file paths corresponding to the Python and MATLAB files, excluding any non-code files or nested directories.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_scanner.py:test_scan_directory_skips_git_folder:7708578763c0d2daa26bfe88d908f39bf9e5cfad38c280470aa74486a07b1397": "This function tests the `scan_directory` function to ensure it skips files within a `.git` directory. It creates a temporary directory with specified files, including ones inside a `.git` subdirectory. The function scans this directory and asserts that only non-`.git` files are included in the result.",
  "PROJECT:795e750a9218441a35a4a6105bb8134d8e4f5331269b116de36888e00704ab03": "This codebase implements a system for generating documentation summaries from source code files using language models. It includes modules for parsing different programming languages (Python and MATLAB), summarizing code with an LLM client, caching responses, and reviewing generated documentation for quality. The project also contains unit tests to ensure functionality across various components.",
  "README:f43f4e7af6a0afcd043ca9d5320c977629d769e2d3ffb8ce252fa76846d43ab5": "DocGen-LM is a tool for generating static HTML documentation for Python and MATLAB projects. It analyzes source files and summarizes them using a local Large Language Model (LLM), with support for custom LLM servers via the `llm_client.py` interface. The CLI allows specifying output directories, ignoring certain paths, and selecting specific models or API URLs for the LLM.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\cache.py:ResponseCache:b0db65b7fc8663d3ea2f2fc2a4be17323366b9635a8f294571c914ed7bba5175": "The function `persist_mappings` is designed to store key-value pairs where the keys are stable and the values are responses from a language model.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\cache.py:__init__:9a33407e758bedb6199330d0d24ef3aad1fe8ca6c9c7eff754a7488485053b75": "The `__init__` method initializes a new instance of the `ResponseCache` class. It takes a file path as an argument and sets it as an attribute. The method checks if the file exists at the specified path. If it does, it attempts to read the file's content, parse it as JSON, and store the resulting dictionary in the `_data` attribute. If the file does not exist or contains invalid JSON, it initializes `_data` as an empty dictionary.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\cache.py:_save:c2437fbbecd48e718288506d01e71779430996002b7708a9237b5c30f9f2a62d": "The `_save` method of the `ResponseCache` class writes the current state of the cache dictionary to a file. It uses the `write_text` method of the `file` attribute, which is assumed to be an instance of a file-like object that supports writing text. The method converts the cache dictionary to a JSON string using `json.dumps`, with an indentation of 2 spaces and sorted keys for better readability. The encoding used for writing the file is set to \"utf-8\".",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\cache.py:get:467a3b57f6af2039fe40351446dd97265270e0e3f73ad3aba4327ae564181d25": "The `get` method in the `ResponseCache` class retrieves a cached value associated with a given key. If the key exists in the cache, it returns the corresponding value; otherwise, it returns `None`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\cache.py:make_key:a9f34de87ee36abb31dd9920fa297be2428b1a77306fcda1cd830af4ba46ccec": "This function `make_key` generates a deterministic key for a given file path and its content. It uses the SHA-256 hash algorithm to create a unique identifier based on the file's content, ensuring that any changes in the content result in a different key. The key is formatted as `{file_path}:{digest}`, where `digest` is the hexadecimal representation of the SHA-256 hash of the content. This key can be used to cache and retrieve summaries for specific files efficiently.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\cache.py:set:a6c370df566ed8322a7a86be3c4938864e15315df994f8984e9ec0bfaffe0dec": "The `set` method stores a value in the cache dictionary using a specified key and persists the updated cache to disk.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\docgenerator.py:_build_function_prompt:d0f23ab55bdefeedf359c9eefb253fc698398c46164fba2dd141fe13718788be": "This function `_build_function_prompt` constructs a prompt for summarizing a given Python function's source code. It takes three optional parameters: `source`, `class_name`, and `project_summary`. The function returns a string that includes the following elements:\n\n1. A brief introduction as a documentation generator.\n2. Information about the class the function belongs to, if provided.\n3. A summary of the class, if available.\n4. A summary of the project, if provided.\n5. Instructions on how to summarize the function based on its source code.\n6. The actual source code of the function enclosed in a code block.\n\nThe purpose of this prompt is to provide context and instructions to an LLM (Large Language Model) for generating a concise and accurate documentation summary of the function.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\docgenerator.py:_rewrite_docstring:5610bf338907d2ad0e5e8222bf1596f74a7d2b09c23689459753d2348a60511e": "The function `_rewrite_docstring` takes an LLM client, a response cache, a file path, and a dictionary representing an item (likely a code function or method). It optionally accepts class name, class summary, and project summary. The function checks if the source code or docstring is present; if not, it prints a warning and returns. If context information is provided, it constructs a prompt using `_build_function_prompt`; otherwise, it uses a default `DOC_PROMPT`. A cache key is generated based on the file path, item name, and content. The function then summarizes the docstring using the LLM client and updates the item's docstring with the sanitized result or a default message if no summary is available.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\docgenerator.py:_summarize:6552542cf6083d470b9d6b1cd49453950f2ee52b4f29344d79005d5b3fcd1b6f": "The function `_summarize` takes an LLMClient, a ResponseCache, a key, some text, and a prompt type as arguments. It attempts to retrieve a cached summary using the provided key. If a cached summary exists, it returns that; otherwise, it uses the client to generate a new summary for the given text and prompt type, caches this new summary under the specified key, and then returns it.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\docgenerator.py:clean_output_dir:e479a3832d54e8cce66d11fad90ea488cad904a33e9c151f94e38031fdc98aee": "The function `clean_output_dir` takes a string representing an output directory path and iterates through all files within that directory. If a file has a `.html` extension, it reads the first line of the file. If the first line contains the string \"Generated by DocGen-LM\", the file is deleted. Any exceptions encountered during this process are caught and printed as warnings.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\docgenerator.py:main:b31cca4d757ee26a41800dfd3fbffd17d92f295dc2c7d9303a966226b5433a2c": "The `main` function serves as the entry point for generating HTML documentation using a local Large Language Model (LLM). It parses command-line arguments to specify the source directory, output directory, ignored paths, LLM URL, and model name. The function initializes an LLM client, verifies its connection, sets up the output directory, and cleans it if necessary. It then scans the source directory for Python and MATLAB files, parses them, and generates summaries using the LLM client. The summaries are cached to avoid redundant requests. After summarizing modules, classes, and functions, the function writes an index page and individual module pages to the output directory.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\html_writer.py:_highlight:dc02d9058bdfd7b9eba548ec04b5604d7c94e806a943808b2a1ed0b3e8ca1513": "The `_highlight` function takes a string `code` and a string `language` as input. It uses the Pygments library to highlight the code based on the specified language. If the language is \"matlab\", it uses the MatlabLexer; if \"python\", it uses the PythonLexer; otherwise, it uses the TextLexer. The highlighted code is then formatted as HTML using HtmlFormatter with no classes and nowrap option enabled. The function returns the highlighted code wrapped in `<pre><code>` tags for proper display in HTML documents.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\html_writer.py:_render_html:d6cbcb52d009e6e70c91f5ed1ad8b65984697da617e2b07ac80c0254cad218fb": "This function `_render_html` takes in parameters for the title, header, body, and navigation HTML. It reads a template file from `_TEMPLATE_PATH`, formats it with the provided parameters, and appends a comment indicating that the document was generated by DocGen-LM. The function returns the formatted HTML content as a string.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\html_writer.py:write_index:2eaa30dc7a1a2c5e3efb16bc3460479d9577d2542e64be7099aba9dcbd8ee832": "This function `write_index` generates the content for an `index.html` file in a specified output directory. It takes parameters for the project summary, navigation links, and optional module summaries. The function creates the necessary directory if it doesn't exist, constructs HTML elements for the project summary, navigation links, and module summaries, and then writes these elements to the `index.html` file using a helper function `_render_html`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\html_writer.py:write_module_page:efe2b9189698f409fde10fd7d42a26176132d59b113fde41c8f7033bccdf3a77": "This function `write_module_page` generates an HTML documentation page for a Python or MATLAB module. It takes three parameters: `output_dir`, which is the directory where the output HTML file will be saved; `module_data`, a dictionary containing metadata about the module, including its name, language, summary, classes, and functions; and `page_links`, an iterable of tuples representing navigation links for the documentation page.\n\nThe function first constructs the destination directory and ensures it exists. It then extracts the module's name and language from the `module_data` dictionary. Navigation items are created, including a link to the project overview and any additional links provided in `page_links`.\n\nThe body of the HTML page is built by iterating over the classes and functions defined in the module. For each class, it generates an HTML section with the class name, summary, and methods (if any). Similarly, for each function, it creates a section with the function signature, summary, and source code.\n\nFinally, the function renders the complete HTML page using `_render_html`, which takes the module name, title, body content, and navigation HTML as parameters. The generated HTML is then written to a file in the destination directory with the filename corresponding to the module's name.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\llm_client.py:LLMClient:5670248690f3cd5fa1b3c69519dfc26e6cc9da85500699ca791b27c1a40f032a": "A thin wrapper around the LMStudio HTTP API.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\llm_client.py:__init__:8026beed38d7bfabca844913b2d3e47cb059e06292ad0822dbe50128f8691af0": "The `__init__` method initializes a new instance of the `LLMClient` class. It takes two optional parameters: `base_url` and `model`. The `base_url` parameter specifies the base URL for the LLM API, defaulting to \"http://localhost:1234\". The `model` parameter specifies the model to use for generating documentation summaries, defaulting to \"local\". The method sets these values as instance variables and constructs an endpoint URL for making API requests.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\llm_client.py:ping:4a54c81c5bc19d6923596f0070a5da833a7bfed7385cd282c42e0097a96b9b44": "The `ping` method in the `LLMClient` class checks if the API is reachable by sending a GET request to the base URL with a specified timeout. If the server responds successfully, it returns `True`. If there is an exception during the request, such as a connection error or timeout, it raises a `ConnectionError` with a message indicating that the server cannot be contacted.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\llm_client.py:sanitize_summary:2bbbd51c8579668e8809ed1f6133c821b9f562511b59fba715c022fd64e27463": "",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\llm_client.py:summarize:d294894746747c3cf4ec30f6cbbc81b90ee53d5a246e5b48d183daf2259fe8a5": "The `summarize` method in the `LLMClient` class generates a summary for a given text using a specified prompt type. It uses a template from `PROMPT_TEMPLATES` based on the prompt type, formats it with the input text, and sends a POST request to an endpoint with the model name, temperature, and formatted prompt as JSON payload. The method retries up to three times in case of HTTP errors or request exceptions, updating an error message each time. If all attempts fail, it raises a `RuntimeError` with the accumulated error message.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\parser_matlab.py:parse_matlab_file:9b6a80580283bc1da1e0aad7b5bbf3e7893fafb864e2fbe207d5da879e425da5": "This function `parse_matlab_file` takes the path to a MATLAB `.m` file as input and returns a dictionary containing the file's header comments and any function declarations found within. The function reads the file content, extracts leading comment lines as the header, and uses a regular expression to identify and parse function declarations, extracting their names and arguments.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\parser_python.py:_format_arg:d98c816e8d77421443d183d6edf23330b47c096060a173229dda4cfc335b86d5": "This function formats a Python function argument by appending its type annotation, if available. It takes an `arg` object from the `ast` module and returns a string representing the argument name followed by its type annotation in parentheses. If no annotation is present, it simply returns the argument name.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\parser_python.py:_format_arguments:ae811c1d5fdca26d95736209bc0d17e32673903aea1a1f3d280dcebd50e944bb": "This function `_format_arguments` takes an `ast.arguments` object as input and returns a string representation of the arguments. It handles positional-only arguments, regular arguments, variable positional arguments, keyword-only arguments, and variable keyword arguments, formatting each according to its type and default value if provided. The function uses helper functions like `_format_arg` and `ast.unparse` to convert AST nodes into strings.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\parser_python.py:_format_signature:38f107ef661dac16e65ca71ffd62b5183c0e19a19dc21aba0aa36b762c8a2ca5": "The function `_format_signature` takes an `ast.FunctionDef` or `ast.AsyncFunctionDef` object as input and returns a string representing the signature of the function. It formats the parameters using the `_format_arguments` function and appends the function name and parameters to form the signature. If the function has a return type specified, it also includes that in the signature.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\parser_python.py:parse_python_file:071ce52a2b3dd39658db104c10f87d7e222f8fc7a5e7f8167ef4fe248dd6201f": "The `parse_python_file` function takes a file path as input and returns a dictionary containing structured information about the Python source code. It reads the source code from the specified file, parses it using the `ast` module, and extracts the module docstring, classes, and functions. For each class and function found, it captures details such as name, signature, documentation string, and source code segment. The function returns a dictionary with these structured elements organized by modules, classes, and functions.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\reviewer.py:_find_line_number:238734968d03c46cbe881a12b2e367753c6bcbfeeeae797491f79cc5ee6c2464": "The function `_find_line_number` searches for a specific phrase within an HTML string and returns the line number where the phrase is found. If the phrase is not present, it returns -1. The search is case-insensitive.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\reviewer.py:_is_generated_html:6441d773a7539c6a87566039a7adc08ed62ab19f558549f0b563b868c1b30c1d": "This function checks if a given string `text` appears to be output from DocGen-LM by looking for specific HTML tags that are characteristic of the tool's documentation format. It returns `True` if any of the following conditions are met:\n1. The text contains an `<h1>` tag with the title \"Project Documentation\".\n2. The text contains an `<h2>` tag with the word \"Class:\".\n3. The text contains an `<h3>` tag with the word \"Method:\".",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\reviewer.py:_review_file:126cca311a3fb96bcd32988bbb9639818d4d85aa03c728049a87ae4aaa658c3d": "The function `_review_file` takes a file path and an optional `autofix` flag as input. It reads the HTML content of the specified file, checks for assistant phrasing, contradictions, and hallucinations using separate functions (`check_assistant_phrasing`, `check_contradictions`, `check_hallucinations`), and appends any issues found to a list. If `autofix` is enabled and there are issues, it sanitizes the paragraphs in the HTML content and writes the updated content back to the file. The function returns a list of strings describing the issues found or fixed.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\reviewer.py:_sanitize_paragraphs:86dbaddd91f3ffca1fb66e584f1d09296214dc6321901beea4a0d55772a56a82": "The function `_sanitize_paragraphs` takes a `BeautifulSoup` object as input and iterates over all paragraph (`<p>`) elements within the HTML document. For each paragraph, it retrieves the text content using `.get_text()`, sanitizes it with the `sanitize_summary` function, and then replaces the original paragraph text with the sanitized version.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\reviewer.py:check_assistant_phrasing:5b6c46aca81cd5dcf02c09ef76bb9a6aa1e2061c8189ae609653ac7df2846649": "Function `check_assistant_phrasing` takes a BeautifulSoup object and an HTML string as input. It returns a list of strings identifying any phrases from the predefined set `ASSISTANT_PHRASES` that appear in paragraph tags (`<p>`) within the HTML content. Each found phrase is appended to the list with its line number in the original HTML.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\reviewer.py:check_contradictions:2315595e396fb5020b347ca8eda3b3294b2006ccfe2ce35e5ea03c7a88dfb85e": "This function `check_contradictions` analyzes an HTML document parsed with BeautifulSoup to identify contradictions between the text content and the presence of specific elements. It checks for discrepancies related to the presence or absence of methods, functions, and classes as described in the summary text compared to what is actually found in the HTML structure. The function returns a list of contradiction descriptions if any are found.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\reviewer.py:check_hallucinations:850dd191e83e8afad1f5244d87e0f82ea3457c711283f25c6675ac2e34f8be99": "The function `check_hallucinations` takes a BeautifulSoup object as input and returns a list of hallucination phrases detected within the paragraph elements (`<p>`) of the HTML content. It iterates through all paragraph tags, extracts their text content in lowercase, and checks if any predefined hallucination terms are present. If a term is found, it is added to the findings list.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\reviewer.py:main:3666687dbb03ec0b86249eb46b384ac08a4ea0881f27e2dfdb075cbec6c574f7": "The `main` function parses command-line arguments using the `argparse` module. It expects a directory path as an argument and optionally a flag to enable automatic fixing of issues in the HTML files. The parsed arguments are then used to call the `review_directory` function, passing it the specified directory and the autofix option. The function returns 0 to indicate successful execution.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\reviewer.py:review_directory:f5c85fd9140470c6e045d7c2314df00efd6e23573185341ab95e1fc2b89a94f0": "The function `review_directory` takes a directory path and an optional boolean flag `autofix`. It recursively searches the specified directory for all `.html` files. For each file, it attempts to review its content using the `_review_file` function with the provided `autofix` flag. If successful, it prints each line of the review results. If an error occurs during file reading or processing, it catches the exception and prints an error message before continuing with the next file.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\scanner.py:_is_subpath:3e906e5ed7d839fcfebf7fb7deb2b9ce54dbc2ab6a2104b3bb08abfbcd61393d": "This function checks whether one file system path (`path`) is a subpath of another (`parent`). It returns `True` if `path` is equal to or inside `parent`, and `False` otherwise. The check is performed using the `relative_to` method, which raises a `ValueError` if `path` is not a subpath of `parent`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\scanner.py:scan_directory:5095f2e6679504d712c0e346b88ae90af1324ae46b2501cd00e949399fd18029": "The `scan_directory` function recursively discovers Python (``.py``) and MATLAB (``.m``) files under a specified base directory while ignoring certain paths. It returns a list of absolute paths to the discovered source files, ensuring that ignored directories and internal `.git` folders are excluded from the search.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_cache.py:test_cache_get_missing:325eeb2f9a3c5dec737d65ff4544f9209472bf97e9e89bcc7d3eb56af8ba0dfb": "The function `test_cache_get_missing` tests the behavior of a `ResponseCache` class when attempting to retrieve a value for a key that does not exist in the cache. It creates an instance of `ResponseCache` with a temporary file path and asserts that calling `get` with a non-existent key returns `None`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_cache.py:test_cache_round_trip:d1357482d85a22faf5fc84ec805cf67ea7ded0534b201015a0c70895a3c4bd4d": "This function tests the round-trip functionality of a response cache. It creates a temporary file to store the cache, initializes a `ResponseCache` object with this file path, and sets a cache entry for a specific key (\"file.py\", \"content\") with the value \"summary\". Then, it reloads the cache from the same file and asserts that the retrieved value matches the original cached value.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_docgenerator.py:test_clean_output_dir:6f11939300607983fcc6dcdad9a8c050746706cc8f342195a32f866963879d4f": "The function `test_clean_output_dir` is a unit test for the `clean_output_dir` function in the `docgenerator` module. It creates a temporary directory, simulates the presence of various files within it (including a generated HTML file and other assets), and then calls `clean_output_dir` to clean the output directory. The test asserts that the generated HTML file is deleted while other files remain intact.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_docgenerator.py:test_generates_class_and_function_summaries:2f711ce9ae53b8c927ddfe555eb5a1ba87f9bc9760be193d3c06f49d1644ea80": "This function tests the generation of documentation summaries for a Python project using the `docgenerator` tool. It creates a temporary directory with a sample Python file containing a class and a function. The function then uses a mock LLM client to simulate responses for summarizing the module, project, class, improved class docstring, function, and improved function docstring. After running the main function of the `docgenerator` tool with the specified project and output directories, it asserts that the generated HTML files contain the expected summaries.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_docgenerator.py:test_handles_class_without_docstring:2b5d0fa1580c0b3fda7df5aa5a9a4e71332e7b6936c3e183e3763ab4058fd2bf": "This function tests the handling of a Python class without a docstring. It creates a temporary project directory with a module containing an empty class, sets up a mock LLM client to return predefined summaries for different code elements, and then runs the `main` function with the specified project and output directories. The test asserts that the returned status is 0 (indicating success) and checks that the generated HTML file contains the expected summary for the class.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_docgenerator.py:test_project_summary_is_sanitized:3a02cc559bea78cb172055c5e278a3dd5ab84ff1b6a1b7abb394fd0b9d972292": "This function `test_project_summary_is_sanitized` tests the generation of documentation summaries for a Python project using the DocGen-LM tool. It creates a temporary directory with a sample Python module, sets up a mock LLM client to return predefined summaries, and runs the main function with specified output directories. The test asserts that the generated HTML does not contain certain phrases (\"You can run this\" is absent) while ensuring another phrase (\"It prints.\") is present in the output.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_docgenerator.py:test_readme_summary_used:6d95bb8a09b3dddcc758ee05b2f0bd8423a820096a387a916ed60114dee22766": "This function `test_readme_summary_used` tests the generation of documentation summaries using a mock LLM client. It sets up a temporary project directory with a Python module and a README file. The function then calls the `main` function with the project directory path and an output directory path. It uses a mock LLM client to simulate responses for summarizing different parts of the project, including the README file. After running the main function, it asserts that the output HTML file contains the summary of the README file and that the LLM client was called with \"readme\" as one of its arguments.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_docgenerator.py:test_skips_invalid_python_file:9605463099a31eddd3c4b577fcd9fa0c89e7b7ca8dab9f8acbf5fe386d6be9e4": "This function tests the behavior of the `main` function when encountering an invalid Python file. It creates a temporary project directory with a file containing invalid syntax due to a leading zero, then calls the `main` function with this directory and an output directory specified. The test uses a mock LLM client that returns a summary for valid files but does not handle errors in invalid files. After running the `main` function, it asserts that only the index page is generated in the output directory, while no documentation is created for the invalid file.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_docgenerator.py:test_skips_non_utf8_file:a829409d5334a55c8b8cdbb7461dd3a6144cb420d02a6647f0d67d9fd9532df6": "This function `test_skips_non_utf8_file` tests the behavior of a documentation generation tool when encountering non-UTF-8 encoded files. It creates a temporary project directory with a file that contains invalid UTF-8 bytes, simulates an LLM client that responds to summarization requests, and runs the main function with specified input and output directories. The test asserts that the non-UTF-8 file is skipped during processing and that only valid documentation files are generated in the output directory.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_html_writer.py:test_write_index:c8c6f0eee6772921d9a855757487025a5456f53c767d384b58cd5d3b7a027752": "The function `test_write_index` is a unit test for the `write_index` function. It checks if the generated HTML index file contains the expected content, including project summary, module links, and summaries. The test uses a temporary path to create an output directory, simulates input data for modules and their summaries, and asserts that the resulting HTML file matches the expected structure and content.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_html_writer.py:test_write_module_page:2cbe0be82b3932976fc2e730ec6cfe56a817b8fa4241121fbe706859e1648b77": "The function `test_write_module_page` is a unit test for the `write_module_page` function. It verifies that the HTML page generated by `write_module_page` contains the expected content based on the provided module data and links. The test checks for specific HTML elements such as comments, navigation links, class and method summaries, function summaries, and source code snippets.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_integration.py:test_docgenerator_generates_html:512ea6a6edcc0e2c23c7181fb433a33213a921aa5f4535b3b81351d9e21f3a5a": "This function `test_docgenerator_generates_html` tests the functionality of a documentation generator tool. It creates a temporary project directory with Python and MATLAB files, sets up a mock LLM client to simulate responses, runs the main function of the documentation generator with specified input and output directories, and verifies that HTML files are generated in the output directory containing summaries from the LLM client.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_integration.py:test_static_copied_from_any_cwd:eb960aa637f4f2b15ddbc20ceb523bc076a7905b534401559298c37ca9fa31b4": "The function `test_static_copied_from_any_cwd` is a unit test for the `main` function in the `docgenerator` module. It creates a temporary project directory with a Python module and an output directory for documentation. The test uses a mock LLM client to simulate responses from the language model, ensuring that the `main` function processes the project directory correctly and generates static HTML documentation in the specified output directory. The test also verifies that a static CSS file is copied to the output directory.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_llm_client.py:test_ping_failure:88e030262c311fde2ba211e4ffd0ffe2629a7c739f9903e9a6ddb4344787573a": "The function `test_ping_failure` tests the behavior of an `LLMClient` when it fails to establish a connection. It uses the `patch` context manager from the `unittest.mock` module to simulate a request exception during a ping operation. The `requests.get` method is mocked to raise a `RequestException`, which triggers a `ConnectionError` when attempting to call the `ping` method of the `LLMClient`. This test ensures that the client handles connection failures appropriately by raising an expected exception.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_llm_client.py:test_ping_success:09ac1f4986910a3e000b784114a3362352c91d8797db84c11c9399392fe80b3b": "This function tests the `ping` method of an `LLMClient` class. It creates a mock response object that simulates a successful HTTP GET request without raising any exceptions. The function then asserts that calling `client.ping()` returns `True`, indicating a successful ping. It also verifies that the `requests.get` method was called once with the specified URL and timeout, and that the `raise_for_status` method of the mock response object was called to ensure there were no HTTP errors.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_llm_client.py:test_prompt_varies_by_type:dc769a059a32c6b83f795026d4cca27ede94db70da4e80a99c6050cc9f7136c3": "This function tests that the prompts generated by the `summarize` method of an `LLMClient` instance vary based on the type of code being summarized. It uses a mock response from an LLM client and patches the HTTP POST request to return this mock response. The function then calls the `summarize` method with different types (\"class\" and \"function\") and asserts that the prompts generated for each type are as expected according to predefined templates (`PROMPT_TEMPLATES`). Finally, it checks that the prompts for classes and functions are not equal, ensuring that the prompt generation logic correctly varies by code type.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_llm_client.py:test_readme_prompt_template_used:7f749a4ca95f6cc2e67d34a7f9deb14d3f6ddf60b026408be8796702e24e9e2f": "This function tests the `summarize` method of an `LLMClient` class. It mocks an HTTP POST request to simulate a response from an LLM server. The test checks if the correct prompt template is used for generating documentation summaries, specifically for README files. The prompt template is formatted with the provided text and compared against the expected value.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_llm_client.py:test_sanitize_summary_filters_phrases:ed583b909712934ee3d84874830d151edda27e8cd237726b15224af213fc608b": "The function `test_sanitize_summary_filters_phrases` tests the `sanitize_summary` function to ensure it filters out unwanted phrases from a given text. The test case provides a string containing various phrases, and the expected result is a string with specific phrases removed.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_llm_client.py:test_summarize_raises_runtime_error_with_message:06539a25d9841dc5d40a02d03bf31a3221eb18a2f5f04fff5f10f48924970b0b": "This function tests that the `summarize` method of the `LLMClient` class raises a `RuntimeError` with a specific message when an HTTP error occurs during the request. The test uses mocking to simulate an HTTP error and a JSON parsing error, and then asserts that the expected exception is raised with the correct message.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_llm_client.py:test_summarize_retries_and_returns_summary:3493e5cb79979bc018fe953048dd9857fbafed7624c89bf333266c44e29c27cb": "This function tests the `summarize` method of an `LLMClient` class. It mocks an HTTP request to simulate a failure and then a successful response from a language model server. The test asserts that the `summarize` method retries on failure, waits for 1 second between attempts, and returns the summary text from the successful response.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_parser_matlab.py:test_parse_multiple_functions:eaa7af864a72465b310fb2a65867014a4b7807b1e5802650be96c474ce4fcb86": "This function, `test_parse_multiple_functions`, is a unit test for parsing MATLAB files. It creates a temporary file with multiple MATLAB functions and uses the `parse_matlab_file` function to parse it. The test checks that the parsed result contains two functions named \"compute\" and \"square\", with the correct arguments.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_parser_matlab.py:test_parse_simple_matlab:5609a258a357bfc9ccad57965167abeb737d8f6e64ecb38b93bbfaa4b54b0198": "This function `test_parse_simple_matlab` tests the parsing of a simple MATLAB file. It creates a temporary file with MATLAB code, then uses the `parse_matlab_file` function to parse it. The test checks that the header is correctly extracted and that one function named `add` with arguments `x` and `y` is identified.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_parser_python.py:test_parse_complex_signature:6ae21a92dadcbd05e2d258e3f3519fda5cd9cfdb63caefed9eeafebcc5c1ff83": "This function tests the parsing of a complex Python function signature. It creates a temporary file with a Python source code snippet containing a function with various parameters and a docstring. The function then uses `parse_python_file` to parse this file and extracts the signature and docstring of the first function defined in the file. Finally, it asserts that the extracted signature matches the expected format and that the docstring is correctly identified within the source code.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_parser_python.py:test_parse_simple_module:5b578954a535d4aa34fe9fc7cc4c1add3f67bce57e344c544988fea09d89ef59": "This function tests the `parse_python_file` function by creating a temporary Python file with a simple module containing a class and a function. It then asserts that the parsed result contains the correct module docstring, class name, class docstring, method signature, method docstring, source code of the method, function name, function signature, return type, function docstring, and source code of the function.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_reviewer.py:_make_module:2e82e1292f7eff8b571cad0af9e456c489fb256bbb3c14d1d3d7e9088735b281": "This function `_make_module` generates a module documentation page for Python projects. It takes three parameters: `tmp_path`, which is the temporary directory where the module will be created; `summary`, which is a summary of the module; and `methods`, which is an optional list of methods to include in the module's class.\n\nThe function creates a dictionary `data` with keys for the module name, summary, classes, and functions. If `methods` is provided, it adds a class named \"Foo\" with empty docstring, summary, and the specified methods to the `data` dictionary under the \"classes\" key.\n\nIt then calls the `write_module_page` function to write the module page to the temporary directory using the provided data and a list of tuples specifying the index file. Finally, it returns the path to the generated module HTML file (`mod.html`).",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_reviewer.py:test_assistant_phrasing_detected:cecd58aafc1f7ff6ff802b2f6a7311f9f5fc059a28790e0a569c6d3bc3e5f95b": "This function tests if assistant phrasing is detected and included in the output when generating documentation. It creates a temporary module with specific content, runs the main function with the path to this module, captures the output, and asserts that both \"[ASSISTANT]\" and \"mod.html\" are present in the output.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_reviewer.py:test_autofix_removes_phrasing:12c910b44a08a511a786f0c2de87869d9dcb1e46cea05ac337462fd5bbfc6331": "The function `test_autofix_removes_phrasing` is a unit test for the DocGen-LM project. It checks that the `--autofix` option removes specific phrasing from generated HTML documentation.\n\nHere's what the function does:\n\n1. Creates a temporary directory and generates a Python module file (`_make_module`) with the content \"You can call this.\".\n2. Runs the main function of the DocGen-LM tool with the temporary directory path and the `--autofix` option.\n3. Reads the generated HTML file from the temporary directory.\n4. Asserts that the phrasing \"You can\" is not present in the HTML content, indicating that the autofix feature has successfully removed it.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_reviewer.py:test_contradiction_detected:bc7072b5863d9ba83acb03cd6e0c8e39353929729f50ae4a20d7bed396ce75d8": "This function tests if a contradiction is detected when no methods are defined in a module. It creates a temporary directory, simulates a module with no methods, runs the main function of the documentation generator on this directory, and checks if the output contains the string \"[CONTRADICTION]\".",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_reviewer.py:test_hallucination_detected:bcda0dcd03df9af566deffe2083830dfd3c293ed6bc0b2152e88af2eb2c79fa6": "This function tests for the detection of hallucination in generated documentation. It creates a temporary module with specified content, runs the main function with the path to this module, and captures the output. The test asserts that the string \"[HALLUCINATION]\" is present in the captured output, indicating that the system has detected an anomaly or incorrect information in the generated documentation.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_scanner.py:create_files:1b3bfe74e661982135f820ea40bd70e1792d794fd9972e9e6a6e0eafe9965954": "This function `create_files` takes a base directory and a list of file paths relative to that base. It iterates over each file path, constructs the full path by joining the base directory with the relative path, ensures all parent directories exist (creating them if necessary), and writes an empty string to each file.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_scanner.py:test_scan_directory_ignore_folder:3bd703322d553070a04ea880720b2e2c172df8825930d88b9fddc42a5e8b109f": "This function `test_scan_directory_ignore_folder` tests the functionality of scanning a directory while ignoring specified folders. It creates a temporary directory with various files and subdirectories, including some that should be ignored. The function then calls `scan_directory` with the path to the temporary directory and a list of folders to ignore. The result is compared to an expected set of file paths, ensuring that only the files not in the ignored folders are included.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_scanner.py:test_scan_directory_mixed_file_types:ed422d5f0e8a2ed1bef3333e4ffaee1763a9a255ec94b3f39aa8141acbc92b3f": "The function `test_scan_directory_mixed_file_types` tests the `scan_directory` function with a directory containing files of mixed types (Python, MATLAB, and text). It creates a temporary directory with specified file names and then calls `scan_directory` to get a list of Python paths. The test asserts that the returned set of paths matches the expected set, excluding files with unsupported extensions like `.txt` and `.md`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\AutomatedCodeDocumentation\\tests\\test_scanner.py:test_scan_directory_skips_git_folder:e93639b41d1c6b8c3f05c2fd3143d611cb4f7f8dc3ec9e5fc50fa4d6e50d7e58": ""
}