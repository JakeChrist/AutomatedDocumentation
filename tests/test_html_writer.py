import os
import sys
from pathlib import Path

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
from html_writer import write_index, write_module_page, _highlight


def test_write_index(tmp_path: Path) -> None:
    tree = {
        "pkg": {
            "__files__": [("module<1>", "module1.html")],
            "sub": {"__files__": [("module&2", "module2.html")],},
        }
    }
    summaries = {"module<1>": "First module.", "module&2": ""}
    write_index(str(tmp_path), "Project <summary> & data", tree, summaries)
    html = (tmp_path / "index.html").read_text(encoding="utf-8")
    assert html.splitlines()[0].strip() == "<!-- Generated by DocGen-LM -->"
    assert "Project &lt;summary&gt; &amp; data" in html
    assert html.count("module1.html") == 2
    assert html.count("module2.html") == 2
    assert "module&lt;1&gt;" in html
    assert "module&amp;2" in html
    assert "<h2>Modules" in html
    assert html.count("<details>") >= 2
    pkg_index = html.index("<summary>pkg</summary>")
    sub_index = html.index("<summary>sub</summary>", pkg_index)
    mod2_index = html.index("module2.html", sub_index)
    assert mod2_index > sub_index
    assert "<small>First module." in html
    assert html.count("<small>") == 1
    assert "<h1>Project Documentation" in html


def test_write_module_page(tmp_path: Path) -> None:
    tree = {"__files__": [("OtherModule", "other.html")]}
    module_data = {
        "name": "module1",
        "summary": "Module <summary>",
        "variables": [
            {
                "name": "MOD_VAR",
                "docstring": "Module <var>",
                "source": "MOD_VAR = 1",
            }
        ],
        "classes": [
            {
                "name": "Bar",
                "summary": "Class <summary>",
                "docstring": "Bar docs & stuff",
                "variables": [
                    {
                        "name": "attr",
                        "docstring": "Attr <docs>",
                        "source": "attr = 1",
                    }
                ],
                "methods": [
                    {
                        "name": "baz",
                        "signature": "def baz(self): pass",
                        "docstring": "Baz <docs>",
                        "source": "def baz(self):\n    pass",
                    }
                ],
            }
        ],
        "functions": [
            {
                "name": "foo",
                "signature": "def foo(): pass",
                "summary": "Func summary & stuff",
                "docstring": "Foo docs",
                "source": "def foo():\n    pass",
            }
        ],
    }
    write_module_page(str(tmp_path), module_data, tree)
    html = (tmp_path / "module1.html").read_text(encoding="utf-8")
    assert html.splitlines()[0].strip() == "<!-- Generated by DocGen-LM -->"
    assert '<a href="index.html"><strong>üè† Project Overview</strong></a>' in html
    assert html.count('other.html') == 1
    assert "Module &lt;summary&gt;" in html
    assert "<h2 id=\"Bar\">Class: Bar</h2>" in html
    assert "Bar docs &amp; stuff" in html
    assert "Method: def baz(self): pass" in html
    assert "Baz &lt;docs&gt;" in html
    assert "<h3 id=\"Bar-variables\">Variables</h3>" in html
    assert "<h4 id=\"attr\">attr</h4>" in html
    assert "Attr &lt;docs&gt;" in html
    assert "attr <span" in html
    assert "<h2 id=\"variables\">Variables</h2>" in html
    assert "<h3 id=\"MOD_VAR\">MOD_VAR</h3>" in html
    assert "Module &lt;var&gt;" in html
    assert "MOD_VAR <span" in html
    assert "Func summary &amp; stuff" in html
    assert "<h2>Functions" in html
    assert "def foo(): pass" in html
    assert html.count("<pre><code>") == 4


def test_subfunction_rendering(tmp_path: Path) -> None:
    tree = {}
    module_data = {
        "name": "mod",
        "summary": "",
        "classes": [],
        "functions": [
            {
                "name": "outer",
                "signature": "def outer(x)",
                "source": "def outer(x):\n    def inner(y):\n        pass\n    return inner(x)",
                "subfunctions": [
                    {
                        "name": "inner",
                        "signature": "def inner(y)",
                        "summary": "Inner summary",
                        "docstring": "",
                        "source": "def inner(y):\n    pass",
                        "subfunctions": [],
                    }
                ],
            }
        ],
    }
    write_module_page(str(tmp_path), module_data, tree)
    html = (tmp_path / "mod.html").read_text(encoding="utf-8")
    assert "<details>" in html
    assert "Subfunction: def inner(y)" in html
    assert "Inner summary" in html
    # outer and inner source should both be highlighted
    assert html.count("<pre><code>") == 2


def test_subclass_rendering(tmp_path: Path) -> None:
    tree = {}
    module_data = {
        "name": "mod",
        "summary": "",
        "functions": [],
        "classes": [
            {
                "name": "A",
                "docstring": "",
                "methods": [],
                "subclasses": [
                    {
                        "name": "B",
                        "summary": "B summary",
                        "docstring": "",
                        "methods": [
                            {
                                "name": "m",
                                "signature": "def m(self)",
                                "source": "def m(self):\n    pass",
                                "subfunctions": [],
                            }
                        ],
                        "subclasses": [],
                    }
                ],
            }
        ],
    }
    write_module_page(str(tmp_path), module_data, tree)
    html = (tmp_path / "mod.html").read_text(encoding="utf-8")
    assert "<details>" in html
    assert "Class: B" in html
    assert "B summary" in html
    assert "def m(self)" in html
    assert html.count("<pre><code>") == 1


def test_callgraph_rendering(tmp_path: Path) -> None:
    tree = {}
    module_data = {
        "name": "mod",
        "summary": "",
        "functions": [
            {
                "name": "alpha",
                "signature": "alpha()",
                "qualname": "alpha",
                "calls": ["beta", "external.other"],
                "subfunctions": [],
            },
            {
                "name": "beta",
                "signature": "beta()",
                "qualname": "beta",
                "calls": [],
                "subfunctions": [],
            },
        ],
        "classes": [
            {
                "name": "Widget",
                "qualname": "Widget",
                "methods": [
                    {
                        "name": "build",
                        "signature": "build(self)",
                        "qualname": "Widget.build",
                        "calls": ["self.render", "alpha"],
                        "subfunctions": [],
                    },
                    {
                        "name": "render",
                        "signature": "render(self)",
                        "qualname": "Widget.render",
                        "calls": [],
                        "subfunctions": [],
                    },
                ],
                "subclasses": [],
            }
        ],
    }

    write_module_page(str(tmp_path), module_data, tree)
    html = (tmp_path / "mod.html").read_text(encoding="utf-8")

    assert '<h2 id="callgraph">Call Graph</h2>' in html
    assert '<figure class="callgraph-diagram" data-callgraph>' in html
    assert 'class="callgraph-toolbar"' in html
    assert 'class="callgraph-viewport"' in html
    assert 'class="callgraph-zoom callgraph-zoom-in"' in html
    assert 'class="callgraph-svg"' in html
    assert 'Widget.build(self)' in html
    assert 'xlink:href="#build"' in html
    assert 'xlink:href="#alpha"' in html
    assert 'xlink:href="#beta"' in html
    assert 'class="callgraph-edge external"' in html
    assert 'external.other' in html


def test_cpp_java_highlighting() -> None:
    cpp_html = _highlight("int main() { return 0; }", "cpp")
    java_html = _highlight("class T { int x; }", "java")
    assert "<span" in cpp_html
    assert "<span" in java_html


def test_simulink_rendering(tmp_path: Path) -> None:
    tree = {"__files__": [("simple_model", "simple_model.html")]}
    module_data = {
        "name": "simple_model",
        "language": "simulink",
        "summary": "",
        "module_docstring": "Simulink model: simple\n\nBlocks:\n- Source\n- Gain\n- Scope",
        "model": {
            "name": "simple",
            "blocks": [
                {"name": "Source", "type": "Inport"},
                {"name": "Gain", "type": "Gain", "parameters": [{"name": "Gain", "value": "2"}]},
                {"name": "Scope", "type": "Outport"},
            ],
            "connections": [
                {"source": "Source:1", "target": "Gain:1"},
                {"source": "Gain:1", "target": "Scope:1"},
            ],
        },
    }

    write_module_page(str(tmp_path), module_data, tree)

    html = (tmp_path / "simple_model.html").read_text(encoding="utf-8")
    assert "Simulink model: simple" in html
    assert "<h3 id=\"blocks\">Blocks</h3>" in html
    assert "<svg" in html
    assert "figcaption" in html
